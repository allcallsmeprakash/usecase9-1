name: CI/CD Pipeline

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - main

permissions:
  # needed for OIDC â†’ AWS
  id-token: write
  contents: read

env:
  AWS_REGION: ap-south-1
  AWS_ACCOUNT_ID: 012889719104
  ECR_REPOSITORY: api-flask-repo
  GITHUB_OIDC_ROLE: arn:aws:iam::012889719104:role/oidc_role

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.GITHUB_OIDC_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS identity & ECR access
        run: |
          echo "Caller Identity:"
          aws sts get-caller-identity
          echo "Listing ECR repos:"
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag & push Docker image
        run: |
          IMAGE_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}
          
          # Build from the Api-Flask folder context (where your Dockerfile lives)
          docker build -t ${ECR_REPOSITORY}:${GITHUB_SHA} ./Api-Flask

          # Tag both :latest and the SHA
          docker tag ${ECR_REPOSITORY}:${GITHUB_SHA} ${IMAGE_URI}:latest
          docker tag ${ECR_REPOSITORY}:${GITHUB_SHA} ${IMAGE_URI}:${GITHUB_SHA}

          # Push to ECR
          docker push ${IMAGE_URI}:latest
          docker push ${IMAGE_URI}:${GITHUB_SHA}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve
